1: IMDb Metacritic Rating : https://www.codingninjas.com/codestudio/problems/imdb_1755910?topList=top-100-sql-problems

SELECT title , rating 
FROM earning LEFT JOIN imdb ON
earning.movie_id = imdb.movie_id 
WHERE domestic > 100000000
AND metacritic > 60 
AND imdb.title like '%2012%'


2: IMDb Genre : https://www.codingninjas.com/codestudio/problems/imdb_1755912?topList=top-100-sql-problems

select genre, max(domestic+worldwide-budget) AS net_profit 
FROM earning e LEFT JOIN imdb i 
ON e.movie_id = i.movie_id AND title like '%2012%'
LEFT JOIN genre g on e.movie_id = g.movie_id 
WHERE genre is not null 
group by 1 
having max(domestic+worldwide-budget) > 0 
order by 1

3: IMDb Max Weighted Rating :https://www.codingninjas.com/codestudio/problems/imdb_1755913?topList=top-100-sql-problems&leftPanelTab=0

select g.genre, MAX((i.rating+i.metacritic/10.0)/2.0) as weighted_rating
FROM genre g LEFT JOIN imdb i 
ON g.movie_id = i.movie_id 
AND title like '%2014%'
WHERE genre is not null 
GROUP BY 1
HAVING MAX((i.rating+i.metacritic/10.0)/2.0) > 0 
ORDER BY 1;

4: Students DB :  https://www.codingninjas.com/codestudio/problems/students-data_2105460?topList=top-100-sql-problems&leftPanelTab=0

INSERT INTO students(ID,Name,gender) VALUES(3,'Kim','F'),(4,'Molina','F'),(5,'Dev','M');
SELECT * from students;

5: Big Countries : https://www.codingninjas.com/codestudio/problems/big-country_2105461?topList=top-100-sql-problems

SELECT name,population,area
FROM world
WHERE population > 25000000 OR area > 3000000;

6: Sales Executive : https://www.codingninjas.com/codestudio/problems/sales-person_2105462?topList=top-100-sql-problems

SELECT s.name 
FROM salesperson s 
WHERE s.sales_id  NOT IN 
(SELECT o.sales_id 
FROM orders o LEFT JOIN company c 
ON o.com_id = c.com_id 
WHERE c.name = 'RED') ;

7: Director's Actor : https://www.codingninjas.com/codestudio/problems/director-s-actor_2246916?topList=top-100-sql-problems

SELECT actor_id, director_id
FROM ActorDirector 
GROUP BY actor_id,director_id
HAVING COUNT(1) >= 3

8: Combine Two Tables : https://www.codingninjas.com/codestudio/problems/combine-two-tables_2110759?topList=top-100-sql-problems

SELECT FirstName, LastName ,City , State
FROM Person p LEFT JOIN Address a 
ON p.PersonId = a.PersonId

9: Second Highest Salary : https://www.codingninjas.com/codestudio/problems/second-highest-salary_2110760?topList=top-100-sql-problems

SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET 1;

Select MAX(salary) 
FROM employee 
WHERE salary NOT IN (SELECT MAX(salary) from employee)

10: Rising Temperature :https://www.codingninjas.com/codestudio/problems/rising-temperature_2110761?topList=top-100-sql-problems

SELECT weather.id AS "Id"
FROM weather JOIN weather w 
ON weather.recordDate::DATE - w.recordDate::DATE = 1 
AND weather.Temperature > w.Temperature ;

11:Swap Gender :https://www.codingninjas.com/codestudio/problems/swap-salary_2110762?topList=top-100-sql-problems

update salary set sex = (case sex when 'm' then 'f' else 'm' end)

12:Rank Scores: https://www.codingninjas.com/codestudio/problems/rank-scores_2117771?topList=top-100-sql-problems

Select score, 
    dense_rank() over(order by score desc) dense_rank
FROM scores

13:Consecutive Numbers: https://www.codingninjas.com/codestudio/problems/consecutive-numbers_2119328?topList=top-100-sql-problems

SELECT DISTINCT l1.num as ConsecutiveNums
FROM logs l1,logs l2, logs l3
WHERE l1.id=l2.id-1 AND l2.id=l3.id-1 
    AND l1.num= l2.num AND l2.num = l3.num;

with TEMP AS(select id,num,lag(num,1) over() as num1 ,lag(num,2) over() as num2 from logs)
Select distinct num as con from TEMP where num = num1 and num1=num2;

14:Department Highest Salary: https://www.codingninjas.com/codestudio/problems/department-highest-salary_2119329?topList=top-100-sql-problems



